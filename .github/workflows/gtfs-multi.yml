name: Build & Deploy GTFS Mapper

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: gtfs-mapper

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: gtfs-mapper/package-lock.json

      - name: Install
        run: npm ci --no-audit --no-fund

      - name: Configure Pages
        uses: actions/configure-pages@v5

      # OPTIONAL: expose stable JS/CSS if dist/ exists
      - name: Make app assets available to site
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p site
          if [ -d dist ]; then
            JS="$(find dist -type f -name '*.js' | head -n1 || true)"
            CSS="$(find dist -type f -name '*.css' | head -n1 || true)"
            [ -n "${JS:-}" ] && cp "$JS" site/app.js || true
            [ -n "${CSS:-}" ] && cp "$CSS" site/style.css || true
          else
            echo "No dist/ directory; skipping app.js/style.css"
          fi

      - name: Build site per feed
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p site

          # Generate a slug list from automation/feeds.json (supports 3 shapes)
          if [ ! -f automation/feeds.json ]; then
            echo "ERROR: gtfs-mapper/automation/feeds.json not found"
            exit 1
          fi
          node -e '
            const fs=require("fs");
            const raw=fs.readFileSync("automation/feeds.json","utf8");
            const j=JSON.parse(raw);
            const arr=Array.isArray(j) ? j : (j.feeds ?? []);
            for (const it of arr) {
              const slug = (typeof it==="string") ? it : it.slug;
              if (slug && typeof slug==="string") console.log(slug);
            }
          ' > feeds.txt

          while IFS= read -r SLUG; do
            [ -z "$SLUG" ] && continue
            mkdir -p "site/$SLUG"

            INDEX_HTML='<!doctype html><meta charset="utf-8">
            <title>{{TITLE}}</title>
            <link rel="stylesheet" href="../style.css">
            <h1>{{TITLE}}</h1>
            <p>Last updated: <span id="ts"></span></p>
            <div id="app"></div>
            <script>
              document.getElementById("ts").textContent = new Date().toISOString();
            </script>
            <script type="module" src="../app.js"></script>'

            printf "%s\n" "$INDEX_HTML" > "site/$SLUG/index.html"
            sed -i "s/{{TITLE}}/${SLUG//\//-} GTFS (compiled)/g" "site/$SLUG/index.html"
          done < feeds.txt
          
      - name: Root index
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p site
          cat > site/index.html <<'EOF'
          <!doctype html><meta charset="utf-8">
          <title>GTFS Mapper Feeds</title>
          <h1>GTFS Mapper Feeds</h1>
          <p>Last updated: <span id="ts"></span></p>
          <ul id="list"></ul>
          <script>
            document.getElementById("ts").textContent = new Date().toISOString();
            (async () => {
              // Accept 3 formats: [{slug,url}], {feeds:[...]} or ["slug", ...]
              const res = await fetch('./feeds.json').catch(() => null);
              const data = res && res.ok ? await res.json() : [];
              const arr = Array.isArray(data) ? data : (data.feeds || []);
              const slugs = arr.map(x => typeof x === 'string' ? x : x.slug).filter(Boolean);

              const ul = document.getElementById('list');
              for (const slug of slugs) {
                const li = document.createElement('li');
                const a = document.createElement('a');
                a.href = './' + slug + '/';
                a.textContent = slug;
                li.appendChild(a);
                ul.appendChild(li);
              }
            })();
          </script>
          EOF

      - name: Expose feeds.json
        run: cp automation/feeds.json site/feeds.json

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # path is relative to repo root; working-directory is gtfs-mapper
          path: gtfs-mapper/site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4